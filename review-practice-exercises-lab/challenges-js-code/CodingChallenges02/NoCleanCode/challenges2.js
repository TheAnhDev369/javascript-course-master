/**
 * Th·ª≠ th√°ch l·∫≠p tr√¨nh s·ªë 2
 * S·ª≠ d·ª•ng v√≠ d·ª• BMI t·ª´ Th·ª≠ th√°ch s·ªë 1 v√† m√£ b·∫°n ƒë√£ vi·∫øt, v√† c·∫£i thi·ªán n√≥.
 * Nhi·ªám v·ª• c·ªßa b·∫°n:
 * 1. In m·ªôt ƒë·∫ßu ra ƒë·∫πp m·∫Øt v√†o b·∫£ng ƒëi·ªÅu khi·ªÉn, cho bi·∫øt ai c√≥ BMI cao h∆°n.
 * Th√¥ng b√°o l√† "BMI c·ªßa Mark cao h∆°n John!" ho·∫∑c "BMI c·ªßa John cao h∆°n Mark!"
 * 2. S·ª≠ d·ª•ng m·ªôt m·∫´u theo nghƒ©a ƒëen ƒë·ªÉ ƒë∆∞a c√°c gi√° tr·ªã BMI v√†o ƒë·∫ßu ra.
 * V√≠ d·ª•: "BMI c·ªßa Mark (28,3) cao h∆°n John (23,9)!"
 * G·ª£i √Ω: S·ª≠ d·ª•ng c√¢u l·ªánh if/else üòâ
 * CH√öC MAY M·∫ÆN üòÄ
 */
//  L·∫ßn 1:  N√™n vi·∫øt tr·ª±c ti·∫øp ƒëi·ªÅu ki·ªán v√†o if thay v√¨ ƒë·ªÉ n√≥ trong bi·∫øn
//  Data 1:
const masskMark = 78;
const heightMark = 1.69;
const massJohn = 92;
const heightJohn = 1.95;

const BMIMark = masskMark / heightMark ** 2; // 27.309968138370508
const BMIJohn = massJohn / heightJohn ** 2; // 24.194608809993426
console.log(BMIMark, BMIJohn);

const markHigherBMI = BMIMark > BMIJohn;
console.log(markHigherBMI);

const whoBMIHigher = BMIMark < BMIJohn;
//  nghƒ©a l√† ki·ªÉm tra n·∫øu Mark th·∫•p h∆°n John, d·∫´n ƒë·∫øn sai k·∫øt qu·∫£ => false v√† code trong if s·∫Ω kh√¥ng ch·∫°y, ch·∫°y kh·ªëi else.
//  N·∫øu d√πng d·∫•u > th√¨ logic s·∫Ω ƒë√∫ng => true v√† in ra if
if (whoBMIHigher) {
  console.log("Mark's BMI is higher than John's!");
} else {
  console.log(
    `Mark's BMI (28.3) is higher than John's (23.9)
    Mark's BMI (${BMIMark}) is higher than John's (${BMIJohn})
  `
  );
}

//  L·∫ßn 2
//  Data 2
const masskMark1 = 95;
const heightMark1 = 1.88;
const massJohn1 = 85;
const heightJohn1 = 1.76;

const BMIMark1 = masskMark1 / (heightMark1 * heightMark1); //    C√¥ng th·ª©c 2: BMI = c√¢n n·∫∑ng / (chi·ªÅu cao x chi·ªÅu cao);
const BMIJohn1 = massJohn1 / (heightJohn1 * heightJohn1);
console.log(BMIMark1, BMIJohn1);

const markHigherBMI1 = BMIMark1 < BMIJohn1;
console.log(markHigherBMI1); //   True

//  26.87867813490267 27.44059917355372

//  TH1: Do BMIMark1 < BMIJohn1 => True => log ra kh·ªëi if
//  TH2: N·∫øu BMIMark1 > BMIJohn1 => False => log ra kh√¥i else
if (BMIMark1 > BMIJohn1) {
  console.log(`John's BMI is higher than Mark's!`);
} else {
  console.log(
    `Mark's BMI (${BMIMark1.toFixed(1)}) is higher than John's (${BMIJohn1})!`
  );
}

//  L·∫ßn 3:
const masskMark3 = 78;
const heightMark3 = 1.69;
const massJohn3 = 92;
const heightJohn3 = 1.95;

const BMIMark3 = masskMark3 / heightMark3 ** 2; // 27.309968138370508
const BMIJohn3 = massJohn3 / heightJohn3 ** 2; // 24.194608809993426
console.table({ BMIMark3, BMIJohn3 });

const markHigherBMI3 = BMIMark3 > BMIJohn3;
console.log(markHigherBMI3); //  27.3 > 24.1 => True

const johnHigherBMI3 = BMIMark3 < BMIJohn3; // 27.3 > 24.1 => 27.3 < 24.1 => false
console.log(johnHigherBMI3);

//  TH1: Do BMIMark3 > BMIJohn3 => True => log ra kh·ªëi if
//  TH2: N·∫øu BMIMark3 < BMIJohn3 => False => log ra kh·ªëi else

if (BMIMark3 < BMIJohn3) {
  console.log(`John's BMI is higher than Mark's!`);
} else {
  console.log(
    `Mark's BMI (${BMIMark3.toFixed(
      1
    )}) is higher than John's (${BMIJohn3.toFixed(1)})!`
  );
}

/**
 * ChatGPT
 * So s√°nh trong if (kh√¥ng c·∫ßn bi·∫øn trung gian)
 * if (BMIMark3 > BMIJohn3) {
 * console.log(`Mark's BMI is higher than John's!`);
 * } else {
 * console.log(`John's BMI is higher than Mark's!`);
 * }
 * ‚úÖ Ng·∫Øn g·ªçn, kh√¥ng c·∫ßn th√™m bi·∫øn.
 * ‚ùå Nh∆∞·ª£c ƒëi·ªÉm: N·∫øu c·∫ßn d√πng l·∫°i k·∫øt qu·∫£ so s√°nh nhi·ªÅu l·∫ßn, b·∫°n ph·∫£i l·∫∑p l·∫°i ƒëi·ªÅu ki·ªán BMIMark3 > BMIJohn3, g√¢y d∆∞ th·ª´a.
 *
 * D√πng bi·∫øn so s√°nh tr∆∞·ªõc r·ªìi ki·ªÉm tra trong if
 * const markHigherBMI3 = BMIMark3 > BMIJohn3;
 * if (markHigherBMI3) {
 * console.log(`Mark's BMI is higher than John's!`);
 * } else {
 * console.log(`John's BMI is higher than Mark's!`);
 * }
 * ‚úÖ G·ªçn h∆°n n·∫øu c·∫ßn d√πng l·∫°i gi√° tr·ªã markHigherBMI3 nhi·ªÅu l·∫ßn.
 * ‚úÖ ƒê·ªçc code d·ªÖ hi·ªÉu h∆°n: Bi·∫øn markHigherBMI3 m√¥ t·∫£ r√µ r√†ng ƒëi·ªÅu ki·ªán.
 * ‚úÖ D·ªÖ b·∫£o tr√¨: N·∫øu c√¥ng th·ª©c so s√°nh thay ƒë·ªïi, ch·ªâ c·∫ßn s·ª≠a m·ªôt ch·ªó (khai b√°o bi·∫øn).
 *
 * Khi n√†o n√™n d√πng bi·∫øn so s√°nh?
 * ‚úî Khi c·∫ßn d√πng l·∫°i gi√° tr·ªã so s√°nh nhi·ªÅu l·∫ßn trong code.
 * ‚úî Khi mu·ªën code r√µ r√†ng h∆°n cho ng∆∞·ªùi ƒë·ªçc.
 * ‚úî Khi ƒëi·ªÅu ki·ªán so s√°nh ph·ª©c t·∫°p.
 *
 * ‚ö† N·∫øu ch·ªâ d√πng m·ªôt l·∫ßn duy nh·∫•t, th√¨ so s√°nh tr·ª±c ti·∫øp trong if l√† ƒë·ªß!
 *
 * T√≥m l·∫°i:
 * N·∫øu ch·ªâ ki·ªÉm tra m·ªôt l·∫ßn ‚Üí D√πng tr·ª±c ti·∫øp trong if.
 * N·∫øu c·∫ßn d√πng nhi·ªÅu l·∫ßn ho·∫∑c mu·ªën code d·ªÖ ƒë·ªçc h∆°n ‚Üí D√πng bi·∫øn so s√°nh. üöÄ
 */
